package ledworks4;

/*
 * eLogFrame.java
 *
 * Created on December 22, 2007, 8:33 PM
 */


import java.util.StringTokenizer;
import java.io.*;
import java.nio.charset.Charset;

/**
 * This is a utility console class that creates a frame for holding error
 * logging messages.  
 * @author  William Brinkert
 */
public class eLogFrame extends javax.swing.JFrame {
    fileIOHandler fios = new fileIOHandler();
    
    /** Creates new form eLogFrame */
    public eLogFrame() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        consoleInputButton = new javax.swing.JButton();
        consoleInput = new javax.swing.JTextField();
        bugoutPane = new javax.swing.JScrollPane();
        bugout = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Console");

        consoleInputButton.setText("Try");
        consoleInputButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consoleInputButtonMouseClicked(evt);
            }
        });

        consoleInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consoleInputKeyPressed(evt);
            }
        });

        bugoutPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        bugout.setColumns(20);
        bugout.setEditable(false);
        bugout.setLineWrap(true);
        bugout.setRows(5);
        bugout.setWrapStyleWord(true);
        bugout.setOpaque(false);
        bugoutPane.setViewportView(bugout);
        bugout.getAccessibleContext().setAccessibleName("bugout");
        bugout.getAccessibleContext().setAccessibleDescription("console output");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(consoleInput, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(consoleInputButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bugoutPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(bugoutPane, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consoleInputButton)
                    .addComponent(consoleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consoleInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consoleInputKeyPressed
        //bugout.append(evt.getKeyCode() + " ");
        String text = "";
        if (evt.getKeyCode() == 10) {
            
            bugout.append(consoleInput.getText() + "\n");
            tryAction(consoleInput.getText());
            consoleInput.setText("" + "\r");
        }
    }//GEN-LAST:event_consoleInputKeyPressed

    private void consoleInputButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consoleInputButtonMouseClicked
       bugout.append(consoleInput.getText() + "\n");
       consoleInput.setText("" + "\r");
    }//GEN-LAST:event_consoleInputButtonMouseClicked
    
    /**
     * @param args the command line arguments
     */
    
    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new eLogFrame().setVisible(true);
            }
        });
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea bugout;
    private javax.swing.JScrollPane bugoutPane;
    private javax.swing.JTextField consoleInput;
    private javax.swing.JButton consoleInputButton;
    // End of variables declaration//GEN-END:variables
    public void tryAction(String conIn){
        String[] word = loadComLine(conIn);
        for (int i = 0; i < word.length; i++){
            bugout.append(word[i] + "\n");
        }
        if (word[0].equalsIgnoreCase("savelog")){
            fios.saveFile(word[1] + ".txt",bugout.getText());
        }
        if (word[0].equalsIgnoreCase("load")){
            bugout.setText(fios.loadFile(word[1]));
        }
        if (word[0].equalsIgnoreCase("getDirectory")){
            String userdir = System.getProperty("user.dir");
            bugout.append("Console output:" +userdir +"\n");
        }
        if (word[0].equalsIgnoreCase("getPath")){
            File f = new File(word[1]);
            if (f.exists()){
                String path = f.getPath();
                bugout.append(word[1] +" path is "+ path +"\n");
            } else {bugout.append("File "+ word[1] +" does not exist here. \n");}    
        }
        if (word[0].equalsIgnoreCase("getDefCharSet")){
            bugout.append("Default Charset is:" + Charset.defaultCharset().displayName()+"\n");
        }
        if (word[0].equalsIgnoreCase("setcharset_ASCII")){
            Charset cs = Charset.forName("US-ASCII");
        }
        if (word[0].equalsIgnoreCase("testPorts")){
            SerialWrite sw = new SerialWrite();
            sw.testListofPorts();
        }
    }
    public String[] loadComLine(String thisLine){
        int x = 0;
        StringTokenizer cIT = new StringTokenizer(thisLine);
        String[] tempArray = new String[cIT.countTokens()];
        while (cIT.hasMoreTokens()){
            tempArray[x] = cIT.nextToken();
            x++;
        }
        return tempArray;
    }
}
