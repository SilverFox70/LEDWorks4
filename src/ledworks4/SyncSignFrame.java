/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SyncSignFrame.java
 *
 * Created on Sep 17, 2010, 3:04:22 PM
 */

package ledworks4;

import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.text.DecimalFormat;
import java.io.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author Electrics
 */
public class SyncSignFrame extends javax.swing.JFrame {
    static String resourceFilePath = LEDWorks4View.resourceFilePath;
    int chCountA = 0;
    int chCountB = 0;
    int ecount = 0;
    int currentPos = 0;
    double timeA = 0;
    double timeB = 0;
    String rawText = "";
    static double chSpeed = 0.102;
    DecimalFormat df = new DecimalFormat("#0.00");
    CharSequence[] pause = {"@PA1","@PA2","@PA3","@PA4","@PA5","@PA6","@PA7","@PA8","@PA9"};

    /** Creates new form SyncSignFrame */
    public SyncSignFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfCharCountA = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfTimeA = new javax.swing.JTextField();
        markEventButtonA = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jtfCharCountB = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtfTimeB = new javax.swing.JTextField();
        markEventButtonB = new javax.swing.JButton();
        SyncInputBox = new javax.swing.JCheckBox();
        SyncEventsButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SignA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        SignB = new javax.swing.JTextArea();
        clearAllButton = new javax.swing.JButton();
        carPos1 = new javax.swing.JTextField();
        carPos2 = new javax.swing.JTextField();
        toCapsButton = new javax.swing.JButton();
        sendSignAButton = new javax.swing.JButton();
        sendSignBButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileItem = new javax.swing.JMenuItem();
        saveFileItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(ledworks4.LEDWorks4App.class).getContext().getResourceMap(SyncSignFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jtfCharCountA.setBackground(resourceMap.getColor("jtfCharCountA.background")); // NOI18N
        jtfCharCountA.setEditable(false);
        jtfCharCountA.setText(resourceMap.getString("jtfCharCountA.text")); // NOI18N
        jtfCharCountA.setName("jtfCharCountA"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jtfTimeA.setBackground(resourceMap.getColor("jtfTimeA.background")); // NOI18N
        jtfTimeA.setEditable(false);
        jtfTimeA.setText(resourceMap.getString("jtfTimeA.text")); // NOI18N
        jtfTimeA.setFocusable(false);
        jtfTimeA.setName("jtfTimeA"); // NOI18N

        markEventButtonA.setFont(resourceMap.getFont("markEventButtonA.font")); // NOI18N
        markEventButtonA.setText(resourceMap.getString("markEventButtonA.text")); // NOI18N
        markEventButtonA.setName("markEventButtonA"); // NOI18N
        markEventButtonA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                markEventButtonAMouseClicked(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jtfCharCountB.setBackground(resourceMap.getColor("jtfCharCountB.background")); // NOI18N
        jtfCharCountB.setEditable(false);
        jtfCharCountB.setText(resourceMap.getString("jtfCharCountB.text")); // NOI18N
        jtfCharCountB.setName("jtfCharCountB"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jtfTimeB.setBackground(resourceMap.getColor("jtfTimeB.background")); // NOI18N
        jtfTimeB.setEditable(false);
        jtfTimeB.setText(resourceMap.getString("jtfTimeB.text")); // NOI18N
        jtfTimeB.setName("jtfTimeB"); // NOI18N

        markEventButtonB.setFont(resourceMap.getFont("markEventButtonB.font")); // NOI18N
        markEventButtonB.setText(resourceMap.getString("markEventButtonB.text")); // NOI18N
        markEventButtonB.setName("markEventButtonB"); // NOI18N
        markEventButtonB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                markEventButtonBMouseClicked(evt);
            }
        });

        SyncInputBox.setText(resourceMap.getString("SyncInputBox.text")); // NOI18N
        SyncInputBox.setName("SyncInputBox"); // NOI18N

        SyncEventsButton.setText(resourceMap.getString("SyncEventsButton.text")); // NOI18N
        SyncEventsButton.setName("SyncEventsButton"); // NOI18N
        SyncEventsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SyncEventsButtonMouseClicked(evt);
            }
        });

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        SignA.setColumns(20);
        SignA.setFont(new java.awt.Font("Courier New", 0, 13));
        SignA.setRows(1);
        SignA.setName("SignA"); // NOI18N
        SignA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SignAMouseClicked(evt);
            }
        });
        SignA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SignAFocusGained(evt);
            }
        });
        SignA.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                SignACaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        SignA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SignAKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(SignA);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        SignB.setColumns(20);
        SignB.setFont(new java.awt.Font("Courier New", 0, 13));
        SignB.setRows(1);
        SignB.setName("SignB"); // NOI18N
        SignB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SignBMouseClicked(evt);
            }
        });
        SignB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SignBFocusGained(evt);
            }
        });
        SignB.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                SignBCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        SignB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SignBKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(SignB);

        clearAllButton.setText(resourceMap.getString("clearAllButton.text")); // NOI18N
        clearAllButton.setName("clearAllButton"); // NOI18N
        clearAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearAllButtonMouseClicked(evt);
            }
        });

        carPos1.setColumns(5);
        carPos1.setEditable(false);
        carPos1.setText(resourceMap.getString("carPos1.text")); // NOI18N
        carPos1.setName("carPos1"); // NOI18N

        carPos2.setColumns(5);
        carPos2.setEditable(false);
        carPos2.setText(resourceMap.getString("carPos2.text")); // NOI18N
        carPos2.setName("carPos2"); // NOI18N

        toCapsButton.setText(resourceMap.getString("toCapsButton.text")); // NOI18N
        toCapsButton.setName("toCapsButton"); // NOI18N
        toCapsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toCapsButtonMouseClicked(evt);
            }
        });

        sendSignAButton.setText(resourceMap.getString("sendSignAButton.text")); // NOI18N
        sendSignAButton.setName("sendSignAButton"); // NOI18N
        sendSignAButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendSignAButtonMouseClicked(evt);
            }
        });

        sendSignBButton.setText(resourceMap.getString("sendSignBButton.text")); // NOI18N
        sendSignBButton.setName("sendSignBButton"); // NOI18N
        sendSignBButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendSignBButtonMouseClicked(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        openFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileItem.setText(resourceMap.getString("openFileItem.text")); // NOI18N
        openFileItem.setName("openFileItem"); // NOI18N
        openFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileItem);

        saveFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileItem.setText(resourceMap.getString("saveFileItem.text")); // NOI18N
        saveFileItem.setName("saveFileItem"); // NOI18N
        saveFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N
        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfCharCountA, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfTimeA, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                        .addComponent(carPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(markEventButtonA))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(SyncEventsButton)
                        .addGap(18, 18, 18)
                        .addComponent(toCapsButton)
                        .addGap(68, 68, 68)
                        .addComponent(sendSignBButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addComponent(clearAllButton))
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jtfCharCountB, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfTimeB, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendSignAButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SyncInputBox)
                                .addGap(97, 97, 97)
                                .addComponent(carPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(markEventButtonB)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jtfCharCountA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jtfTimeA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(markEventButtonA)
                        .addComponent(carPos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendSignAButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(markEventButtonB)
                    .addComponent(SyncInputBox)
                    .addComponent(jtfTimeB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtfCharCountB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(carPos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SyncEventsButton)
                    .addComponent(clearAllButton)
                    .addComponent(sendSignBButton)
                    .addComponent(toCapsButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SignAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SignAKeyReleased
        String text = SignA.getText();
        currentPos = SignA.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos1.setText(""+currentPos);
        chCountA = SignA.getText().length();
        timeA = (chCountA * chSpeed)+ checkForPause(SignA.getText());
        jtfCharCountA.setText(chCountA + "");
        jtfTimeA.setText(df.format(timeA)+ "");
        if (SyncInputBox.isSelected()){
            int carLoc = SignA.getCaretPosition();
            SignB.append(SignA.getText().substring(carLoc-1, carLoc));
            chCountB = SignB.getText().length();
            timeB = chCountB * chSpeed;
            jtfCharCountB.setText(chCountB + "");
            jtfTimeB.setText(df.format(timeB) + "");
        }
    }//GEN-LAST:event_SignAKeyReleased

    private void SignBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SignBKeyReleased
        String text = SignB.getText();
        currentPos = SignB.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos2.setText(""+currentPos);
        chCountB = SignB.getText().length();
        timeB = (chCountB * chSpeed)+ checkForPause(SignB.getText());
        jtfCharCountB.setText(chCountB + "");
        jtfTimeB.setText(df.format(timeB) + "");
    }//GEN-LAST:event_SignBKeyReleased

    private void openFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileItemActionPerformed
        fileIOHandler fios = new fileIOHandler();
        String actionCommand = evt.getActionCommand();
        if ("Open File".equalsIgnoreCase(actionCommand)){
            JFileChooser fC = new JFileChooser();
            fC.setCurrentDirectory(new File(resourceFilePath));
            if (fC.showOpenDialog(SyncSignFrame.this)== fC.APPROVE_OPTION){
                rawText = fios.loadFile(fC.getSelectedFile());
                eLogFrame.bugout.append("From file:"+rawText);
                String[] splitText = rawText.split("%");
                SignA.setText(splitText[0]);
                SignB.setText(splitText[1]);
                ecount = countEventMarkers(SignA.getText());
            }
        }
    }//GEN-LAST:event_openFileItemActionPerformed

    private void saveFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileItemActionPerformed
        String actionCommand = evt.getActionCommand();
        String combineSigns = SignA.getText()+"%"+SignB.getText();
        eLogFrame.bugout.append("Output:"+combineSigns);
        if ("Save File".equalsIgnoreCase(actionCommand)){
            JFileChooser fC = new JFileChooser();
            fC.setCurrentDirectory(new File(resourceFilePath));
            if (fC.showSaveDialog(SyncSignFrame.this)==fC.APPROVE_OPTION){
                fileIOHandler fios = new fileIOHandler(fC.getSelectedFile() + ""); 
                fios.saveFile(combineSigns);
            }
        }
    }//GEN-LAST:event_saveFileItemActionPerformed

    private void markEventButtonAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markEventButtonAMouseClicked
        // TODO add your handling code here:
        int carLoc = SignA.getCaretPosition();
        ecount++;
        SignA.insert("#"+ecount,carLoc);
    }//GEN-LAST:event_markEventButtonAMouseClicked

    private void markEventButtonBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markEventButtonBMouseClicked
        // TODO add your handling code here:
        CharSequence s = "#"+ecount;
        int carLoc = SignB.getCaretPosition();
        if (carLoc < 0){
            carLoc = SignB.getText().length();
        }
        if (!SignB.getText().contains(s)){
            SignB.insert("#"+ecount,carLoc);
        }
    }//GEN-LAST:event_markEventButtonBMouseClicked

    private void SyncEventsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SyncEventsButtonMouseClicked
        // TODO add your handling code here:
        int eIndexA = 0;
        int eIndexB = 0;
        int psAdj_A = 0;
        int psAdj_B = 0;
        int adjLenA = 0;
        int adjLenB = 0;
        int eN = 0;
        while (ecount > 0){
            ecount--;
            eN++;
            String eMarker = "#"+ eN;
            String textA = SignA.getText();
            String textB = SignB.getText();
            eIndexA = textA.indexOf(eMarker);
            eIndexB = textB.indexOf(eMarker);
            psAdj_A = adjustForPause(textA.substring(0, eIndexA));
            psAdj_B = adjustForPause(textB.substring(0, eIndexB));
            adjLenA = eIndexA + psAdj_A;
            adjLenB = eIndexB + psAdj_B;
            if ( adjLenA > adjLenB ){
                SignB.setText(makeSameLength(textB,eMarker,adjLenA,adjLenB));
                textA=textA.replaceAll(eMarker, "");
                SignA.setText(textA);
                eLogFrame.bugout.append("SignB set text called...\n");
            }
            else if (adjLenB > adjLenA){
                SignA.setText(makeSameLength(textA,eMarker,adjLenB,adjLenA));
                textB=textB.replaceAll(eMarker, "");
                SignB.setText(textB);
            }
        }
    }//GEN-LAST:event_SyncEventsButtonMouseClicked

    private void clearAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearAllButtonMouseClicked
        // TODO add your handling code here:
        SignA.setText("");
        SignB.setText("");
    }//GEN-LAST:event_clearAllButtonMouseClicked

    private void SignAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SignAFocusGained
        String text = SignA.getText();
        currentPos = SignA.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos1.setText(""+currentPos);
    }//GEN-LAST:event_SignAFocusGained

    private void SignBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SignBFocusGained
        // TODO add your handling code here:
        String text = SignB.getText();
        currentPos = SignB.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos2.setText(""+currentPos);
    }//GEN-LAST:event_SignBFocusGained

    private void SignACaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_SignACaretPositionChanged
        String text = SignA.getText();
        currentPos = SignA.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos1.setText(""+currentPos);
    }//GEN-LAST:event_SignACaretPositionChanged

    private void SignBCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_SignBCaretPositionChanged
        String text = SignB.getText();
        currentPos = SignB.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos2.setText(""+currentPos);
    }//GEN-LAST:event_SignBCaretPositionChanged

    private void SignAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SignAMouseClicked
        String text = SignA.getText();
        currentPos = SignA.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos1.setText(""+currentPos);
    }//GEN-LAST:event_SignAMouseClicked

    private void SignBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SignBMouseClicked
        String text = SignB.getText();
        currentPos = SignB.getCaretPosition();
        text = text.substring(0, currentPos);
        currentPos = currentPos + adjustForPause(text);
        carPos2.setText(""+currentPos);
    }//GEN-LAST:event_SignBMouseClicked

    private void toCapsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toCapsButtonMouseClicked
        String tempA = SignA.getText();
        String tempB = SignB.getText();
        SignA.setText(tempA.toUpperCase());
        SignB.setText(tempB.toUpperCase());
    }//GEN-LAST:event_toCapsButtonMouseClicked

    private void sendSignAButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendSignAButtonMouseClicked
        String text = LEDWorks4View.processForPRG(SignA.getText());
        SerialWrite sw = new SerialWrite();
        sw.sendToSign(text);
    }//GEN-LAST:event_sendSignAButtonMouseClicked

    private void sendSignBButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendSignBButtonMouseClicked
        String text = LEDWorks4View.processForPRG(SignB.getText());
        SerialWrite sw = new SerialWrite();
        sw.sendToSign(text);
    }//GEN-LAST:event_sendSignBButtonMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SyncSignFrame().setVisible(true);
                eLogFrame log = new eLogFrame();
                log.pack();
                log.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea SignA;
    private javax.swing.JTextArea SignB;
    private javax.swing.JButton SyncEventsButton;
    private javax.swing.JCheckBox SyncInputBox;
    private javax.swing.JTextField carPos1;
    private javax.swing.JTextField carPos2;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jtfCharCountA;
    private javax.swing.JTextField jtfCharCountB;
    private javax.swing.JTextField jtfTimeA;
    private javax.swing.JTextField jtfTimeB;
    private javax.swing.JButton markEventButtonA;
    private javax.swing.JButton markEventButtonB;
    private javax.swing.JMenuItem openFileItem;
    private javax.swing.JMenuItem saveFileItem;
    private javax.swing.JButton sendSignAButton;
    private javax.swing.JButton sendSignBButton;
    private javax.swing.JButton toCapsButton;
    // End of variables declaration//GEN-END:variables
    //Other Methods
    private double checkForPause(String text){
        double time = 0;
        for (int i = 0; i < pause.length; i++){
            if (text.contains(pause[i])){
                time = 1.57 * (i+1);
            }
        }
        return time;
    }
    private String makeSameLength(String str, String marker, int targetLen, int curLen){
        eLogFrame.bugout.append("makeSame called...\n");
        int difference = targetLen - curLen;
        String spacer = replacementString(difference);
        eLogFrame.bugout.append("return from replacementString...\nspacer is:"+spacer+".");
        str=str.replaceAll(marker, spacer);
        eLogFrame.bugout.append("string is:"+str+"\n");
        return str;
    }
    private String clrScreen(String s, int i){
        String botS = s.substring(0, i);
        String topS = s.substring(i);
        botS.concat("                ");
        s = botS + topS;
        return s;
    }
    private String replacementString(int d){
        eLogFrame.bugout.append("replacementString called...\n d="+d+"\n");
        String rS = "";
        if (d > 32){
            rS = rS.concat(insertBlanks(16));
            d=d-16;
        }
        while (d > 16){
            if (d > 133){
                rS=rS.concat("@PA9");
                d=d-134;
                continue;
            }
                else if (d > 63){
                    rS=rS.concat("@PA4");
                    d=d-64;
                }
                else if (d > 47){
                    rS=rS.concat("@PA3");
                    d=d-48;
                }
                    else if (d > 31){
                        rS=rS.concat("@PA2");
                        d=d-32;
                    }
                        else if (d > 15){
                            rS=rS.concat("@PA1");
                            d=d-16;
                        }
        }
        rS=rS.concat(insertBlanks(d));
        eLogFrame.bugout.append("return from insertBlanks...\n");
        return rS;
    }
    private String insertBlanks(int i){
        eLogFrame.bugout.append("insertBlanks called...\n i="+i+"\n");
        String blanks = "";
        while (i > 0){
            blanks=blanks.concat(" ");
            i--;
        }
        eLogFrame.bugout.append("blanks=" +blanks+ ".\n");
        return blanks;

    }
    private int countEventMarkers(String text){
        int i = 0;
        i = text.split("#").length;
        return i;

    }
    private int adjustForPause(String text){
        int i = 0;
        for (int j = 0; j < pause.length; j++){
            if (text.contains(pause[j])){
                i = i + (text.split(pause[j].toString()).length-1) * ((16*(j+1))-5);
                if ((text.split(pause[j].toString()).length-1)== 0){
                    i = i + ((16*(j+1))-4);
                }
                eLogFrame.bugout.append("found "+ (text.split(pause[j].toString()).length-1) +" "+ pause[j].toString() +", i="+ i +"\n");
            }

        }
        eLogFrame.bugout.append("total pause adjustment:"+i+"\n");
        return i;
    }
}
